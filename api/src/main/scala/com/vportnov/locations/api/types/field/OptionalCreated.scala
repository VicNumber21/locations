package com.vportnov.locations.api.types.field

import java.time.{ ZonedDateTime, ZoneOffset, LocalDateTime }
import io.circe.{ Encoder, Decoder }
import sttp.tapir.Schema

import com.vportnov.locations.model

import com.vportnov.locations.api.types.field.Created

final case class OptionalCreated(v: OptionalCreated.Underlying):
  def toModel: model.Location.OptionalTimestamp = v.map(_.withZoneSameInstant(ZoneOffset.UTC).toLocalDateTime)

object OptionalCreated:
  type Underlying = Option[ZonedDateTime]

  def apply(v: OptionalCreated.Underlying): OptionalCreated = new OptionalCreated(v)

  object meta:
    val description = "Optional UTC timestamp in ISO format when location created. Autogenerated if not given."
    val example = Some(Created.meta.example)

  given Schema[OptionalCreated] = Schema.schemaForOption[ZonedDateTime].as[OptionalCreated]
    .description(OptionalCreated.meta.description)
    .encodedExample(OptionalCreated.meta.example)

  given Encoder[OptionalCreated] = Encoder.encodeOption[ZonedDateTime].contramap(_.v)
  given Decoder[OptionalCreated] = Decoder.decodeOption[ZonedDateTime].map(OptionalCreated(_))
